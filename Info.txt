8 Bit Computer ISA
------------------

No of Res: A, B, C, D
    [A:00, B:01, C: 10, D:11]

** for Comments use ';' 

--------------------------------------------------------------------------------------------------------
| Instruction Format | Binary Opcode | Instruction | Ins Size | Operation Description                  |
|--------------------|---------------|-------------|----------|----------------------------------------|
| 00TT_0000          | 0000_0000     | NOP         | 1 Byte   | No Operation                           |
| T: Type            | 0001_0000     | OUT         | 1 Byte   | Display a value in 7-Segment           |
|                    | 0010_0000     | HLT         | 1 Byte   | Halt the platform                      |
|--------------------|---------------|-------------|----------|----------------------------------------|
| SSDD_0001          | SSDD_0001     | ADD S D     | 1 Byte   | Add 2 register and update to source    |
| S: Source Register |               |             |          |                                        |
| D: Dest. Register  |               |             |          |                                        |
|--------------------|---------------|-------------|----------|----------------------------------------|
| SSDD_0010          | SSDD_0010     | SUB S D     | 1 Byte   | Substract 2 regs. & update to source   |
| S: Source Register |               |             |          |                                        |
| D: Dest. Register  |               |             |          |                                        |
|--------------------|---------------|-------------|----------|----------------------------------------|
| RRTT_0011          | RR10_0011     | INC R       | 1 Byte   | Increment register                     |
| R: Register        | RR11_0011     | DEC R       | 1 Byte   | Decrement register                     |
| T: Type            |               |             |          |                                        |
|--------------------|---------------|-------------|----------|----------------------------------------|
| RRTT_0100          | RR00_0100     | LDI R VV    | 2 Byte   | Load immediate                         |
| T: Type            | RR01_0100     | LDM R AA    | 2 Byte   | Load from memory                       |
| R: Register        | RR10_0100     | SAV R AA    | 2 Byte   | Save to memory                         |
|--------------------|---------------|-------------|----------|----------------------------------------|
| 00TT_0101          | 0000_0101     | JMP AA      | 2 Byte   | Jump to a specific address             |
| T: Type            | 0001_0101     | JMZ AA      | 2 Byte   | Jump to address when Zero flag set     |
|                    | 0010_0101     | JNZ AA      | 2 Byte   | Jump to address when Zero flag not set |
|--------------------|---------------|-------------|----------|----------------------------------------|
| SSDD_0110          | SSDD_0110     | MOV S D     | 1 Byte   | Register-to-register move              |
| S: Source Register |               |             |          |                                        |
| D: Dest. Register  |               |             |          |                                        |
|--------------------|---------------|-------------|----------|----------------------------------------|
| SSDD_0111          | SSDD_0111     | AND S D     | 1 Byte   | Logical AND operation                  |
| S: Source Register |               |             |          |                                        |
| D: Dest. Register  |               |             |          |                                        |
|--------------------|---------------|-------------|----------|----------------------------------------|
| SSDD_1000          | SSDD_1000     | OR S D      | 1 Byte   | Logical OR operation                   |
| S: Source Register |               |             |          |                                        |
| D: Dest. Register  |               |             |          |                                        |
|--------------------|---------------|-------------|----------|----------------------------------------|
| SSDD_1001          | SSDD_1001     | XOR S D     | 1 Byte   | Logical XOR operation                  |
| S: Source Register |               |             |          |                                        |
| D: Dest. Register  |               |             |          |                                        |
|--------------------|---------------|-------------|----------|----------------------------------------|
| RR00_1010          | RR00_1010     | NOT R       | 1 Byte   | Logical XOR operation                  |
| R: Register        |               |             |          |                                        |
|--------------------|---------------|-------------|----------|----------------------------------------|
| SSDD_1011          | SSDD_1011     | CMP S D     | 1 Byte   | Compare two register value             |
| S: Source Register |               |             |          |                                        |
| D: Dest. Register  |               |             |          |                                        |
--------------------------------------------------------------------------------------------------------


Instructions set
--------------------------
                XXXX_XXXX
0.  NOP         0000_0000           // No Operation
    ---------------------
    NOP         0000_0000


1.  ADD         SSDD_0001           // Add 2 numbers from regiter; Save in register
    ---------------------
    ADD A B     0001_0001
    ADD A C     0010_0001
    ADD A D     0011_0001
    ADD B A     0100_0001
    ADD B C     0110_0001
    ADD B D     0111_0001
    ADD C A     1000_0001
    ADD C B     1001_0001
    ADD C D     1011_0001
    ADD D A     1100_0001
    ADD D B     1101_0001
    ADD D C     1110_0001


2.  SUB         SSDD_0010           // Substact 2 number from regiter; Save in register
    ---------------------
    SUB A B     0001_0010
    SUB A C     0010_0010
    SUB A D     0011_0010
    SUB B A     0100_0010
    SUB B C     0110_0010
    SUB B D     0111_0010
    SUB C A     1000_0010
    SUB C B     1001_0010
    SUB C D     1011_0010
    SUB D A     1100_0010
    SUB D B     1101_0010
    SUB D C     1110_0010


3.  INC         RR10_0011           // Increase Register Value by 1
    ---------------------
    INC A       0010_0011
    INC B       0110_0011
    INC C       1010_0011
    INC D       1110_0011


4.  DEC         RR11_0011           // Decrise Register Value by 1
    ---------------------
    DEC A       0011_0011
    DEC B       0111_0011
    DEC C       1011_0011
    DEC D       1111_0011


6.  LDI         RR00_0100           // Load a value imediatly to Register
    ---------------------
    LDI A 0xXX  0000_0100 xxxx_xxxx
    LDI B 0xXX  0100_0100 xxxx_xxxx
    LDI C 0xXX  1000_0100 xxxx_xxxx
    LDI D 0xXX  1100_0100 xxxx_xxxx


7.  LDM         RR01_0100           // Load a value from Memory to Register
    ---------------------
    LDM A 0xXX  0001_0100 xxxx_xxxx
    LDM B 0xXX  0101_0100 xxxx_xxxx
    LDM C 0xXX  1001_0100 xxxx_xxxx
    LDM D 0xXX  1101_0100 xxxx_xxxx


8.  SAV         RR10_0100           // Save to value from register to Memory
    ---------------------
    SAV A 0xXX  0010_0100 xxxx_xxxx
    SAV B 0xXX  0110_0100 xxxx_xxxx
    SAV C 0xXX  1010_0100 xxxx_xxxx
    SAV D 0xXX  1110_0100 xxxx_xxxx


9.  JMP         0000_0101           // Jump to an address
    ---------------------
    JMP 0xXX    0000_0101 xxxx_xxxx


10. JMZ         0001_0101           // Jump to an address when Zero flag set
    ---------------------
    JMZ 0xXX    0001_0101 xxxx_xxxx


11. JNZ         0010_0101           // Jump to an address when Zero flag Not set
    ---------------------
    JNZ 0xXX    0010_0101 xxxx_xxxx


5.  MOV         SSDD_0110           // Move value from Register to Register
    ---------------------
    MOV A B     0001_0110
    MOV A C     0010_0110
    MOV A D     0011_0110
    MOV B A     0100_0110
    MOV B C     0110_0110
    MOV B D     0111_0110
    MOV C A     1000_0110
    MOV C B     1001_0110
    MOV C D     1011_0110
    MOV D A     1100_0110
    MOV D B     1101_0110
    MOV D C     1110_0110


12. AND         SSDD_0111           // Logical AND operation 
    ---------------------
    AND A B     0001_0111
    AND A C     0010_0111
    AND A D     0011_0111
    AND B A     0100_0111
    AND B C     0110_0111
    AND B D     0111_0111
    AND C A     1000_0111
    AND C B     1001_0111
    AND C D     1011_0111
    AND D A     1100_0111
    AND D B     1101_0111
    AND D C     1110_0111


13. OR          SSDD_1000           //Logical OR operation
    ---------------------
    OR A B      0001_1000
    OR A C      0010_1000
    OR A D      0011_1000
    OR B A      0100_1000
    OR B C      0110_1000
    OR B D      0111_1000
    OR C A      1000_1000
    OR C B      1001_1000
    OR C D      1011_1000
    OR D A      1100_1000
    OR D B      1101_1000
    OR D C      1110_1000


12. XOR         SSDD_1001           // Logical XOR operation 
    ---------------------
    XOR A B     0001_1001
    XOR A C     0010_1001
    XOR A D     0011_1001
    XOR B A     0100_1001
    XOR B C     0110_1001
    XOR B D     0111_1001
    XOR C A     1000_1001
    XOR C B     1001_1001
    XOR C D     1011_1001
    XOR D A     1100_1001
    XOR D B     1101_1001
    XOR D C     1110_1001


13. NOT         RR00_1010           // Logical NOT operation
    ---------------------
    NOT A       0000_1010
    NOT B       0100_1010
    NOT C       1000_1010
    NOT D       1100_1010


14. CMP         SSDD_1011           // Compare value with Register to Register
    ---------------------
    CMP A B     0001_1011
    CMP A C     0010_1011
    CMP A D     0011_1011
    CMP B A     0100_1011
    CMP B C     0110_1011
    CMP B D     0111_1011
    CMP C A     1000_1011
    CMP C B     1001_1011
    CMP C D     1011_1011
    CMP D A     1100_1011
    CMP D B     1101_1011
    CMP D C     1110_1011


15. OUT         0001_0000           //  Display a value in 7-Seg
    ---------------------
    OUT         0001_0000


16. HLT         0010_0000           // Halt the system
    ---------------------
    HLT         0010_0000
