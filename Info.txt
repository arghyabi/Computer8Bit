8 Bit Computer
--------------

No of Res: A, B, C, D
    [A:00, B:01, C: 10, D:11]

Format: [SRC | DST | 0001]
        [2b]  [2b]   opcode

Opcode | Mnemonic | Description
-------|----------|--------------------------
0000   | NOP      | No Operation
0001   | ADD      | Add register to ALU
0010   | SUB      | Subtract register from ALU
0011   | INC      | Increment register
0100   | DEC      | Decrement register
0101   | MOV      | Register-to-register move
0110   | LDI      | Load immediate
0111   | LDM      | Load from memory
1000   | SAV      | Save to memory
1001   | JMP      | Jump to a address
1010   | JMZ      | Jump to a address when Zero flag set
1011   | JNZ      | Jump to a address when Zero flag Not set
1110   | OUT      | Display a value in 7-Seg
1111   | HLT      | Halt the platform


Instructions set
--------------------------
                XXXX_XXXX
0.  NOP             _0000           // No Operation
    NOP         0000_0000

1.  ADD             _0001           // Add the number with ALU value; Save in ALU
    ADD A       0000_0001
    ADD B       0001_0001
    ADD C       0010_0001
    ADD D       0011_0001

2.  SUB             _0010           // Substact the number from ALU value; Save in ALU
    SUB A       0000_0010
    SUB B       0001_0010
    SUB C       0010_0010
    SUB D       0011_0010

3.  INC             _0011           // Increase Register Value by 1
    INC A       0000_0011
    INC B       0001_0011
    INC C       0010_0011
    INC D       0011_0011

4.  DEC             _0100           // Decrise Register Value by 1
    DEC A       0000_0100
    DEC B       0001_0100
    DEC C       0010_0100
    DEC D       0011_0100

5.  MOV             _0101           // Move value from Register to Register
    MOV A       0000_0101           -> NOP
    MOV A B     0001_0101
    MOV A C     0010_0101
    MOV A D     0011_0101
    MOV B       0101_0101           -> NOP
    MOV B A     0100_0101
    MOV B C     0110_0101
    MOV B D     0111_0101
    MOV C       1010_0101           -> NOP
    MOV C A     1000_0101
    MOV C B     1001_0101
    MOV C D     1011_0101
    MOV D       1111_0101           -> NOP
    MOV D A     1100_0101
    MOV D B     1101_0101
    MOV D C     1110_0101

6.  LDI             _0110           // Load a value imediatly to Register
    LDI A 0xXX  0000_0110 xxxx_xxxx
    LDI B 0xXX  0001_0110 xxxx_xxxx
    LDI C 0xXX  0010_0110 xxxx_xxxx
    LDI D 0xXX  0011_0110 xxxx_xxxx

7.  LDM             _0111           // Load a value from Memory to Register
    LDM A 0xXX  0000_0111 xxxx_xxxx
    LDM B 0xXX  0001_0111 xxxx_xxxx
    LDM C 0xXX  0010_0111 xxxx_xxxx
    LDM D 0xXX  0011_0111 xxxx_xxxx

8.  SAV             _1000           // Save to value from register to Memory
    SAV A 0xXX  0000_1000 xxxx_xxxx
    SAV B 0xXX  0001_1000 xxxx_xxxx
    SAV C 0xXX  0010_1000 xxxx_xxxx
    SAV D 0xXX  0011_1000 xxxx_xxxx

9.  JMP             _1001           // Jump to an address
    JMP 0xXX    0000_1001 xxxx_xxxx

10. JMZ             _1010           // Jump to an address when Zero flag set
    JMZ 0xXX    0000_1010 xxxx_xxxx

11. JNZ             _1011           // Jump to an address when Zero flag Not set
    JNZ 0xXX    0000_1011 xxxx_xxxx

14. OUT             _1110           //  Display a value in 7-Seg
    OUT         0000_1110

15. HLT             _1111           // Halt the system
